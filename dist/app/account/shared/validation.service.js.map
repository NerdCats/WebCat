{"version":3,"sources":["account/shared/validation.service.ts"],"names":[],"mappings":"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","file":"account/shared/validation.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport { Validators, Control } from '@angular/common';\r\n\r\nimport { ValidationError } from './validationError';\r\nimport { AccountService } from './account.service';\r\n\r\n@Injectable()\r\nexport class ValidationService {\r\n\r\n    constructor(private accountService: AccountService) {\r\n\r\n    }\r\n\r\n    static getValidatorErrorMessage(code: string) {\r\n        let config = {\r\n            'required': 'Required',\r\n            'invalidEmailAddress': 'Invalid email address',\r\n            'emailTaken': 'Email already taken',\r\n            'invalidPassword': 'Invalid password. Password must be at least 6 characters long',\r\n            'usernameTaken': 'Username already taken',\r\n            'phonenumberTaken': 'PhoneNumber already taken',\r\n            'serverConnctionError': 'Failed connecting to server, please try again later'\r\n        };\r\n        return config[code];\r\n    }\r\n\r\n    //section password\r\n    passwordValidator(control): ValidationError {\r\n        if (control.value!=null && control.value.length < 6) {\r\n            return { 'invalidPassword': true };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // section email\r\n    get emailFormat() {\r\n        return \"^[-a-z0-9~!$%^&*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$\";\r\n    }\r\n\r\n    emailFormatValidator(control): ValidationError {\r\n        var regex = new RegExp(this.emailFormat);\r\n        if (regex.test(control.value)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return { 'invalidEmailAddress': true };\r\n        }\r\n    }\r\n\r\n    emailAvailibilityValidatorAsync(control: Control): Promise<ValidationError> {\r\n        return new Promise(resolve => {\r\n            this.accountService.check(\"email\", control.value)\r\n                .subscribe(result => {\r\n                    if (!result.IsAvailable) {\r\n                        resolve({ 'emailTaken': true });\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, error => {\r\n                    resolve({ 'serverConnctionError': true });\r\n                });\r\n        });\r\n    }\r\n\r\n    //section username\r\n    usernameValidatorAsync(control: Control): Promise<ValidationError> {\r\n        return new Promise(resolve => {\r\n            this.accountService.check(\"username\", control.value)\r\n                .subscribe(result => {\r\n                    if (!result.IsAvailable) {\r\n                        resolve({ 'usernameTaken': true });\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                },\r\n                error => {\r\n                    // TODO: I'm not sure resolving here this way is the\r\n                    // right thing to do, I might need to reject the promise\r\n                    // here\r\n                    resolve({ 'serverConnctionError': true });\r\n                });\r\n        });\r\n    }\r\n\r\n    //section phonenumber\r\n    phonenumberAvailibilityValidatorAsync(control: Control): Promise<ValidationError> {\r\n        return new Promise(resolve => {\r\n            this.accountService.check(\"phonenumber\", control.value)\r\n                .subscribe(result => {\r\n                    if (!result.IsAvailable) {\r\n                        resolve({ 'phonenumberTaken': true });\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, error => {\r\n                    // TODO: Same as aforementioned one\r\n                    resolve({ 'serverConnctionError': true });\r\n                });\r\n        });\r\n    }\r\n}"],"sourceRoot":"/source/"}