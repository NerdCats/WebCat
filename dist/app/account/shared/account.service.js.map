{"version":3,"sources":["account/shared/account.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAwD,eAAe,CAAC,CAAA;AACxE,mBAA2B,SAAS,CAAC,CAAA;AAKrC,6BAA4B,2BAA2B,CAAC,CAAA;AAGxD;IACI,wBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAEtB,eAAU,GAAG,0BAAW,CAAC,gBAAgB,GAAG,SAAS,CAAC,CAAE,iBAAiB;IAF/C,CAAC;IAInC,iCAAQ,GAAR,UAAS,YAA8B;QACnC,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAClE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAEvD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,WAAW,EAAE,IAAI,EAAE,OAAO,CAAC;aAC9D,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAED,8BAAK,GAAL,UAAM,YAAoB,EAAE,cAAsB;QAC9C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,SAAS,GAAG,YAAY,GAAG,GAAG,GAAG,cAAc,CAAC;aAClF,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAEO,oCAAW,GAAnB,UAAoB,GAAa;QAC7B,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QACtD,CAAC;QAED,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACtB,CAAC;IAEO,oCAAW,GAAnB,UAAoB,KAAU;QAC1B,gDAAgD;QAChD,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,IAAI,cAAc,CAAC;QAC7C,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,eAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IApCL;QAAC,iBAAU,EAAE;;sBAAA;IAqCb,qBAAC;AAAD,CApCA,AAoCC,IAAA;AApCY,sBAAc,iBAoC1B,CAAA","file":"account/shared/account.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Rx';\r\n\r\nimport { UserRegistration } from './user.registration';\r\nimport { User } from './user';\r\nimport { AvailibilityResponse } from './availibility-response';\r\nimport { AppSettings } from '../../shared/app.settings';\r\n\r\n@Injectable()\r\nexport class AccountService {\r\n    constructor(private http: Http) { }\r\n\r\n    private accountUrl = AppSettings.TASKCAT_API_BASE + 'account';  // URL to web API\r\n\r\n    register(registration: UserRegistration): Observable<User> {\r\n        let body = JSON.stringify(registration);\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ headers: headers });\r\n\r\n        return this.http.post(this.accountUrl + \"/register\", body, options)\r\n            .map(this.extractData)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    check(propertyName: string, suggestedValue: string): Observable<AvailibilityResponse> {\r\n        return this.http.get(this.accountUrl + '/check?' + propertyName + \"=\" + suggestedValue)\r\n            .map(this.extractData)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private extractData(res: Response) {\r\n        if (res.status < 200 || res.status >= 300) {\r\n            throw new Error('Response status: ' + res.status);\r\n        }\r\n\r\n        let body = res.json();\r\n        return body || {};\r\n    }\r\n\r\n    private handleError(error: any) {\r\n        // We should use a remote logging infrastructure\r\n        let errMsg = error.message || 'Server error';\r\n        console.error(errMsg); // log to console instead\r\n        return Observable.throw(errMsg);\r\n    }\r\n}"],"sourceRoot":"/source/"}