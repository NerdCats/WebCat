{"version":3,"sources":["account/signup/signup.component.ts"],"names":[],"mappings":"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","file":"account/signup/signup.component.js","sourcesContent":["import { Component, ViewChild, OnInit } from '@angular/core';\r\nimport { NgForm, FormBuilder, Control, ControlGroup, Validators, CORE_DIRECTIVES, FORM_DIRECTIVES } from '@angular/common';\r\nimport { MODAL_DIRECTIVES, ModalComponent } from 'ng2-bs3-modal/ng2-bs3-modal';\r\nimport { HTTP_PROVIDERS } from '@angular/http';\r\nimport { TYPEAHEAD_DIRECTIVES } from 'ng2-bootstrap';\r\n\r\nimport { ControlMessage } from './control-message.component';\r\nimport { UserRegistration } from '../shared/user.registration';\r\nimport { AccountService } from '../shared/account.service';\r\nimport { ValidationService } from '../shared/validation.service';\r\nimport { LocalityService } from '../../shared/app-locality.service';\r\nimport { User } from '../shared/user';\r\nimport { AvailibilityResponse } from '../shared/availibility-response';\r\nimport { AppSettings } from  '../../shared/app.settings';\r\n\r\n@Component({\r\n    selector: 'signup',\r\n    templateUrl: 'app/account/signup/signup.component.html',\r\n    directives: [MODAL_DIRECTIVES, ModalComponent, TYPEAHEAD_DIRECTIVES, CORE_DIRECTIVES, FORM_DIRECTIVES, ControlMessage],\r\n    providers: [HTTP_PROVIDERS, AccountService, ValidationService, LocalityService]\r\n})\r\nexport class SignupComponent implements OnInit {\r\n    private errorMessage: string;\r\n    private userModel: User;\r\n    private usernameAvailableResult: AvailibilityResponse;\r\n\r\n    public submitted = false;\r\n    public submitCompleted = false;\r\n    public submitResultMessage: string;\r\n\r\n    // Area Typeahead\r\n    // TODO: For some weird reason typeahead doesnt work without an ngModel\r\n    // if anyone finds a solution please fix this\r\n    public localityQuery: string;\r\n    public localities: Array<string>;\r\n\r\n    public registrationModel: UserRegistration;\r\n    public signupForm: ControlGroup;\r\n\r\n    public interestedLocality : Control = new Control(\"\", Validators.required);\r\n\r\n    ngOnInit() {\r\n        this.localities = this.localityService.getLocalities();\r\n    }\r\n\r\n    constructor(private formBuilder: FormBuilder,\r\n        private accountService: AccountService,\r\n        private validationService: ValidationService,\r\n        private localityService: LocalityService) {\r\n\r\n        this.registrationModel = new UserRegistration();\r\n\r\n        // TODO: This is definitely a hack, we need to make it more generic so we\r\n        // can support multiple countries\r\n\r\n        this.signupForm = formBuilder.group({\r\n            \"username\": ['', Validators.required, (c) => { return this.validationService.usernameValidatorAsync(c); }],\r\n            \"email\": [\r\n                '',\r\n                Validators.compose([\r\n                    Validators.required,\r\n                    (c) => { return this.validationService.emailFormatValidator(c); }\r\n                ]),\r\n                (c) => { return this.validationService.emailAvailibilityValidatorAsync(c); }\r\n            ],\r\n            \"password\": ['', Validators.compose([Validators.required, (c) => { return this.validationService.passwordValidator(c); }])],\r\n            'interestedLocality': this.interestedLocality\r\n        });\r\n    }\r\n\r\n    public onLocalitySelect(e: any): void {\r\n        // The only reason we are doing this like this is an\r\n        // existing bug in Angular2 bootstrap\r\n        // details is on https://github.com/valor-software/ng2-bootstrap/issues/463\r\n        // If the bug is fixed please update the module and\r\n        // use [ngFormControl] to bind to the control\r\n        this.interestedLocality.updateValue(e.item);\r\n\r\n        // TODO: Need to add the selected locality in the registration\r\n        this.registrationModel.InterestedLocalities = new Array<string>();\r\n        this.registrationModel.InterestedLocalities.push(e.item);\r\n    }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // INFO: Confirming password as the UI wouldnt have that now\r\n        this.registrationModel.ConfirmPassword = this.registrationModel.Password;\r\n\r\n        this.accountService.register(this.registrationModel)\r\n            .subscribe(result => {\r\n                this.userModel = result;\r\n                this.submitResultMessage = \"Please check your mail for account confirmation at \" + this.userModel.Email + \".\\n\" + \"In any case, you're already registered in \" + AppSettings.APP_NAME;\r\n                this.submitCompleted = true;\r\n            },\r\n            error => {\r\n                this.submitResultMessage = error;\r\n                this.submitCompleted = true;\r\n            });\r\n\r\n        console.log(\"registration form submitted\");\r\n    }\r\n\r\n    // Modal related section starts here\r\n    @ViewChild('modal')\r\n    modal: ModalComponent;\r\n\r\n    close() {\r\n        this.modal.close();\r\n    }\r\n\r\n    open() {\r\n        this.modal.open();\r\n    }\r\n\r\n    onModalClosed() {\r\n        this.resetForm();\r\n    }\r\n\r\n    onModelDismissed() {\r\n        this.resetForm();\r\n    }\r\n\r\n    resetForm() {\r\n        this.submitCompleted = false;\r\n        this.submitted = false;\r\n        this.submitResultMessage = \"\";\r\n    }\r\n}"],"sourceRoot":"/source/"}